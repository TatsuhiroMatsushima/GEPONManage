{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","tasks","id","body","changeText","bind","submitTask","fetchTasks","this","fetch","then","response","json","setState","e","inputText","target","value","console","dir","method","headers","JSON","stringify","taskId","className","map","task","key","onClick","putTask","deleteTask","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2OAiGeA,G,wDA7Fb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,CACL,CACEC,GAAI,EACJC,KAAM,sEAER,CACED,GAAI,EACJC,KAAM,sGAIZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAhBN,E,iEAoBZG,KAAKD,e,mCAGO,IAAD,OACXE,MAAM,uEACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CAAEZ,MAAOW,S,iCAIlBE,GACT,IAAMC,EAAYD,EAAEE,OAAOC,MAC3BT,KAAKK,SAAS,CAAEE,UAAWA,IAC3BG,QAAQC,IAAIJ,K,mCAIZN,MAAM,sEAAuE,CAC3EW,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBlB,KAAMmB,KAAKC,UAAU,CAAEpB,KAAMK,KAAKR,MAAMe,cAEvCL,KAAKF,KAAKD,c,8BAEPiB,GACNf,MAAM,uEAAyEe,EAAQ,CACrFJ,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBlB,KAAMmB,KAAKC,UAAU,CAAEpB,KAAM,+BAE5BO,KAAKF,KAAKD,c,iCAGFiB,GACXf,MAAM,uEAAuEe,EAAQ,CACnFJ,OAAQ,WAETV,KAAMF,KAAKD,c,+BAGJ,IAAD,OACP,OACE,yBAAKkB,UAAU,OACb,yBAAKA,UAAU,SAEXjB,KAAKR,MAAMC,MAAMyB,KAAI,SAAAC,GACnB,OACE,yBAAKF,UAAU,OAAOG,IAAKD,EAAKzB,IAC7ByB,EAAKxB,KACN,4BAAQsB,UAAU,MAAMI,QAAS,WAAQ,EAAKC,QAAQH,EAAKzB,MAA3D,OACA,4BAAQuB,UAAU,SAASI,QAAS,WAAQ,EAAKE,WAAWJ,EAAKzB,MAAjE,eAMV,yBAAKA,GAAG,aACN,2BAAO8B,KAAK,OAAOC,SAAUzB,KAAKJ,aAClC,4BAAQyB,QAASrB,KAAKF,YAAtB,gB,GAtFQ4B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.401f76d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      tasks: [\n        {\n          id: 1,\n          body: \"とりあえず表示してみる\"\n        },\n        {\n          id: 2,\n          body: \"私たち、いずれ書き換えられる運命\"\n        }\n      ]\n    }\n    this.changeText = this.changeText.bind(this)\n    this.submitTask = this.submitTask.bind(this)\n    this.fetchTasks = this.fetchTasks.bind(this)\n  }\n\n  componentWillMount() {\n    this.fetchTasks()\n  }\n\n  fetchTasks() {\n    fetch(\"https://my-json-server.typicode.com/TatsuhiroMatsushima/db/db/tasks\") // データを取得しに行く\n      .then(response => response.json()) // json型のレスポンスをオブジェクトに変換する\n      .then(json => { // オブジェクトに変換したレスポンスを受け取り、\n        this.setState({ tasks: json }) // Stateを更新する\n      })\n  }\n\n  changeText(e) {\n    const inputText = e.target.value\n    this.setState({ inputText: inputText })\n    console.dir(inputText);\n  }\n\n  submitTask() {\n    fetch(\"https://my-json-server.typicode.com/TatsuhiroMatsushima/db/db/tasks\", {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ body: this.state.inputText })\n    })\n      .then(this.fetchTasks)\n  }\n  putTask(taskId) {\n    fetch(\"https://my-json-server.typicode.com/TatsuhiroMatsushima/db/db/tasks/\" + taskId, {\n      method: \"PUT\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ body: \"やったよ\" })\n    })\n      .then(this.fetchTasks)\n  }\n\n    deleteTask(taskId) {\n    fetch(\"https://my-json-server.typicode.com/TatsuhiroMatsushima/db/db/tasks/\"+taskId, {\n      method: \"DELETE\"\n    })\n    .then( this.fetchTasks )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"tasks\">\n          {\n            this.state.tasks.map(task => {\n              return (\n                <div className=\"task\" key={task.id}>\n                  {task.body}\n                  <button className=\"put\" onClick={() => { this.putTask(task.id) }}>put</button>\n                  <button className=\"delete\" onClick={() => { this.deleteTask(task.id) }}>delete</button>\n                </div>\n              )\n            })\n          }\n        </div>\n        <div id=\"task-form\">\n          <input type=\"text\" onChange={this.changeText} />\n          <button onClick={this.submitTask}>submit</button>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}